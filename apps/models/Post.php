<?php
namespace Apps\Models;

use Cygnite\Foundation\Application;
use Cygnite\Database\Schema;
use Cygnite\Common\UrlManager\Url;
use Cygnite\Database\ActiveRecord;
use Cygnite\Common\Pagination;

/**
* This file is generated by Cygnite CLI Crud generator
*/

class Post extends ActiveRecord
{
    //your database connection name
    // protected $database = 'cygnite';

    /*
     | By default Every model class name used as table name
     | "User" => 'user'
     | You can also override the table name here
     */
    protected $tableName = 'post';

    protected $primaryKey = 'post_id';

    public $perPage = 5;

    public function __construct()
    {
        parent::__construct();
    }

    // used for pagination
    public function pageLimit()
    {
        return Url::segment($this->params['start_segment'] + 3);
    }

    /**
     * Skip columns from the select query
     * @return array
     */
    public function skip()
    {
        return array('created_at', 'updated_at');
    }

    public function prepareData()
    {
        $groupField = 'category_' . $_COOKIE['cms_lang'];
        $limitGroup = 5;
        $groupList  = $this->query("select category_id from category join post using(category_id) where category.type='post' and post.publish='on' group by category_id order by category.priority asc limit $limitGroup")->getAll(\PDO::FETCH_ASSOC);
        $i=1;
        foreach( $groupList as $group ){
            // switch limit grouping list
            // $limit = ( $i > 2 ) ? 8 : 6;
            $limit = 3;
            $data[][$group->attributes['category_id']] = $this->query("select * from post where category_id=? and publish='on' order by priority limit $limit", [ $group->attributes['category_id'] ] )->getAll(\PDO::FETCH_ASSOC);
            $i++;
        }

        for( $i=0; $i<$limitGroup; $i++){
            $return[$i] = isset($data[$i])? $data[$i] : [];
        }
        return $return;
    }


    public function getDataByCategory($keyword='',$limit="")
    {
        $segment = $this->params['start_segment'];
        $page  = Url::segment($segment+3) ? Url::segment($segment+3)-1 : 0;
        $this->perPage = $limit ? $limit : $this->perPage;
        $start = ($page) ? $page * $this->perPage : 0;
        $limit = $limit ? $limit : $this->perPage;

        $groupField  = 'category_' . $_COOKIE['cms_lang'];
        $sql         = "select SQL_CALC_FOUND_ROWS * from post where category_id=? and publish='on' limit $start,$limit";
        $data        = $this->query( $sql , [ $keyword ] )->getAll(\PDO::FETCH_ASSOC);
        $total       = $this->query("select FOUND_ROWS()")->getAll(\PDO::FETCH_ASSOC);
        $totalRecord = is_object($total->offsetGet(0)) ? $total->offsetGet(0)->attributes['found_rows()'] : 0;
        $paginator   = Pagination::instance($this);
        $pagination  = $paginator->createLinks($totalRecord);
        return array( 'data'=> $data, 'pagination' => $pagination);
    }

    public function getTop($type){
        if($type=='view'){
            $sort = " view desc";
        } else {
            $sort = " priority asc";
        }
        $sql  = "select * from post where publish='on' order by $sort limit 5";
        $data = $this->query( $sql )->getAll(\PDO::FETCH_ASSOC);
        return $data;
    }

    public function getList($keyword='', $limit="")
    {
        $segment = $this->params['start_segment'];
        $page  = Url::segment($segment+3) ? Url::segment($segment+3)-1 : 0;
        $this->perPage = $limit ? $limit : $this->perPage;
        $start = ($page) ? $page * $this->perPage : 0;
        $limit = $limit ? $limit : $this->perPage;
        $sql         = "select SQL_CALC_FOUND_ROWS * from post where title like ? limit $start,$limit";
        $stmt        = $this->query( $sql , [ '%'.$keyword.'%' ] );
        $data        = $stmt->getAll(\PDO::FETCH_ASSOC);
        $total       = $this->query("select FOUND_ROWS()")->getAll(\PDO::FETCH_ASSOC);
        $totalRecord = is_object($total->offsetGet(0)) ? $total->offsetGet(0)->attributes['found_rows()'] : 0;
        $paginator   = Pagination::instance($this);
        $pagination  = $paginator->createLinks($totalRecord);
        return array( 'data'=> $data, 'pagination' => $pagination);
    }
}// End of the User Model