<?php
namespace Apps\Models;

use Cygnite\Foundation\Application;
use Cygnite\Database\Schema;
use Cygnite\Common\UrlManager\Url;
use Cygnite\Database\ActiveRecord;

/**
* This file is generated by Cygnite CLI Crud generator
*/

class Menu extends ActiveRecord
{
    //your database connection name
    // protected $database = 'cygnite';

    /*
     | By default Every model class name used as table name
     | "User" => 'user'
     | You can also override the table name here
     */
    protected $tableName = 'menu';

    protected $primaryKey = 'menu_id';

    //public $perPage = 5;

    public function __construct()
    {
        parent::__construct();
    }

    // public function getLastId()
    // {
    //     $last     = Menu::last();
    //     $lastId   = $last->offsetGet(0)->menu_id;
    //     $menu = Menu::last();
    //     $data = $menu->offsetGet(0);
    //     return is_object($data) ? $data->menu_id : 0;
    // }

    /*
    // used for pagination
    public function pageLimit()
    {
        return Url::segment(3);
    }
    */

    public function updatePriority( $from, $to, $position )
    {
        # position : before, after, lastChild, firstChild
        // $stmtFrom = $this->query('select * from menu where menu_id=?', [ $from ])->getAll(\PDO::FETCH_ASSOC);
        $stmtTo   = $this->query('select level,menu_id,priority,parent_id from menu where menu_id=?', [ $to ])->getAll(\PDO::FETCH_ASSOC);
        $dataTo   = is_object($stmtTo->offsetGet(0)) ? $stmtTo->offsetGet(0)->attributes : '';
        if(empty($dataTo)){
            return;
        }
        $level    = $dataTo['level'];
        $menuId   = $dataTo['menu_id'];
        $parentId = $dataTo['parent_id'];
        $priority = $dataTo['priority'];

        switch( $position ){
            case 'before':
                $priority--;
            break;
            case 'after':
                $priority++;
            break;
            case 'lastChild':
                $level++;
                $priority = $this->getMaxChild($menuId);
                $priority++;
                // $this->updateChild($from, $level);
            break;
            case 'firstChild':
                $level++;
                $priority = 1;
                // $this->query('update priority=priority+1 where parent_id=? and priority>=1', [$menuId])->execute();
                // $this->updateChild($from, $level);
            break;
        }

        // $this->query('update menu set level=?,priority=?,parent_id=? where menu_id=?', [ $level,$priority, $menuId, $from ] )->execute();
    }

    public function updateChild( $id, $level )
    {
        $record = $this->query('select menu_id from menu where parent_id=?', [ $id ] )->fetchAll(\PDO::FETCH_ASSOC);
        if( $record->count() ){
            foreach( $record as $row ){
                $this->query('update menu set level=? where menu_id=?', [ ($level + 1), $row->attributes['menu_id'] ])->execute();
                $this->updateChild( $row->attributes['menu_id'], ($level+1) );
            }
        }
    }

    public function getMaxChild( $id )
    {
        $stmt = $this->query('select max(menu_id) as _max from menu where parent_id=?', [$id])->getAll(\PDO::FETCH_ASSOC);

        return is_object($stmt) ? $stmt->offsetGet(0)->attributes['_max'] : 0;
    }

    public function getLastId()
    {
        $id = $this->query("SHOW TABLE STATUS WHERE name = 'menu'")->getAll(\PDO::FETCH_ASSOC);
        return is_object($id) ? $id->offsetGet(0)->attributes['auto_increment'] : 1;
    }

    public function getNextLevel( $id )
    {
        $level = $this->query("select level from menu where menu_id=?", [ $id ] )->getAll(\PDO::FETCH_ASSOC);
        return is_object($level) ? $level->offsetGet(0)->attributes['level'] + 1 : 1;
    }

    /**
     * Skip columns from the select query
     * @return array
     */
    public function skip()
    {
        return array('created_at', 'updated_at');
    }
}// End of the User Model